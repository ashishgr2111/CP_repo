// Let a be an array denoting the set S. I omit the case when SUM % K != 0.

for k = 0 to K - 1:
    for bitmask = 0 to 2^n - 1:
        if not dp[k][bitmask]: 
            continue
        sum = 0
        for i = 0 to n - 1:
            if (bitmask & (1LL << i)):
                sum += a*
        sum -= k * x
        for i = 0 to n - 1:
            if (bitmask & (1LL << i)):
                continue //there is nothing to extend
            new_mask = bitmask | (1LL << i) //bitmask denoting a set with i-th element added
            if sum + a* == x: //we can fill the k+1 th subset with elements of sum X using a set of elements denoted by new_mask
                dp[k + 1][new_mask] = 1
            else if sum + a* < x: //we can fill k subsets with elements of sum X and one subsets with sum < X using a set of elements denoted by new_mask
                dp[k][new_mask] = 1

if dp[K][2^n - 1] == 1:
    print "yes"
else:
    print "no"
 
// The time complexity per one testcase is O(K * 2^N * N)
