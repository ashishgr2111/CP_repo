# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_simple')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_simple')
    _simple = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_simple', [dirname(__file__)])
        except ImportError:
            import _simple
            return _simple
        try:
            _mod = imp.load_module('_simple', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _simple = swig_import_helper()
    del swig_import_helper
else:
    import _simple
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

VERSION = _simple.VERSION
NO = _simple.NO
YES = _simple.YES

def fopen(arg1, arg2):
    return _simple.fopen(arg1, arg2)
fopen = _simple.fopen

def fclose(arg1):
    return _simple.fclose(arg1)
fclose = _simple.fclose

def fread(ptr, size, nobj, arg4):
    return _simple.fread(ptr, size, nobj, arg4)
fread = _simple.fread

def fwrite(ptr, size, nobj, arg4):
    return _simple.fwrite(ptr, size, nobj, arg4)
fwrite = _simple.fwrite

def malloc(nbytes):
    return _simple.malloc(nbytes)
malloc = _simple.malloc

def free(arg1):
    return _simple.free(arg1)
free = _simple.free

def dot(n, m):
    return _simple.dot(n, m)
dot = _simple.dot

def arange(size):
    return _simple.arange(size)
arange = _simple.arange

def get_foo():
    return _simple.get_foo()
get_foo = _simple.get_foo

def set_foo(x):
    return _simple.set_foo(x)
set_foo = _simple.set_foo
class custom_struct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, custom_struct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, custom_struct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _simple.custom_struct_x_set
    __swig_getmethods__["x"] = _simple.custom_struct_x_get
    if _newclass:
        x = _swig_property(_simple.custom_struct_x_get, _simple.custom_struct_x_set)

    def __init__(self, x):
        this = _simple.new_custom_struct(x)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simple.delete_custom_struct
    __del__ = lambda self: None

    def magnitude(self):
        return _simple.custom_struct_magnitude(self)

    def _print(self):
        return _simple.custom_struct__print(self)
custom_struct_swigregister = _simple.custom_struct_swigregister
custom_struct_swigregister(custom_struct)
cvar = _simple.cvar


def function_custom_struct(cs):
    return _simple.function_custom_struct(cs)
function_custom_struct = _simple.function_custom_struct
# This file is compatible with both classic and new-style classes.


